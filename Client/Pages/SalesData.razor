@page "/salesdata"
@using ClearDemand.MarkdownPlan.Shared
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<PageTitle>Sales Data</PageTitle>

<head>
    <script src="scripts/script.js"></script>
</head>

<h1>Sales Data</h1>


@if (markdownPlans == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div>
        <table class="table">
            <tr>
                <td colspan="3">
                    <Select class="form-control" style="width:20em;" @onchange="selectedValue">
                        <option value="">select markdown plan</option>
                        @foreach (var plan in markdownPlans)
                        {
                            <option value="@plan.MarkdownPlanId">@plan.Description</option>
                        }
                    </Select>
                </td>
            </tr>
        </table>
    </div>

    @if (!string.IsNullOrEmpty(selectedPlan) && sales != null)
    {
        <div>
            <table>

                @foreach (var sale in sales)
                {
                    <tr style="border-bottom:solid 1px">
                        <td style="width:100px">@sale.SaleDate.Value.ToShortDateString()</td>
                        <td>Quantity Sold : <input type="text" @bind="@sale.Quantity" /></td>
                    </tr>
                }
            </table>
        </div>
        <div><input type="button" class="btn btn-dark" @onclick="SaveSalesData" value="Save Data" /> Quantity Left : @quantityLeft</div>
    }
}

@code {
    private MarkdownPlan[]? markdownPlans;
    private string selectedPlan = "";
    private Sale[]? sales;
    private int quantityLeft = 0;
    private int startquantity = 0;
    string? errormessage = "";

    protected override async Task OnInitializedAsync()
    {
        markdownPlans = await Http.GetFromJsonAsync<MarkdownPlan[]>("MarkdownPlan");

    }

    private async void SaveSalesData()
    {
        var total = sales.Sum(x => x.Quantity);
        var check = int.Parse(startquantity.ToString()) - int.Parse(total.ToString());
        if (check < 0)
        {
            errormessage = "Sold amount is more than inventory available.";
            Alert();
            return;
        }
        await Http.PostAsJsonAsync<Sale[]>("SalesData", sales);
        sales = null;
        markdownPlans = await Http.GetFromJsonAsync<MarkdownPlan[]>("MarkdownPlan");
        StateHasChanged();

    }

    public async void selectedValue(ChangeEventArgs selectEvent)
    {
        selectedPlan = selectEvent.Value?.ToString();
        var plan = markdownPlans.Where(x => x.MarkdownPlanId == selectedPlan).FirstOrDefault();
        var url = $"Product?productId={plan.ProductId}";
        var products = await Http.GetFromJsonAsync<Product[]>(url);
        var product = products.FirstOrDefault();
        var startDate = plan.StartDate;
        quantityLeft = product.Quantity;
        startquantity = product.Quantity;


        if (plan.Sales.Count == 0)
        {
            var salelist = new List<Sale>();

            while (startDate != plan.EndDate.AddDays(1))
            {
                salelist.Add(new Sale()
                    {
                        SaleId = Guid.NewGuid().ToString("N"),
                        MarkdownPlanId = selectedPlan,
                        SaleDate = startDate,
                        Cost = product.Cost,
                        AdjustedPrice = GetMarkdownPrice(plan.MarkdownRules.ToArray(), startDate, product.Price)

                    });
                startDate = startDate.AddDays(1);
            }
            sales = salelist.ToArray();
            plan.Sales = sales;

        }
        else
        {
            foreach (var s in plan.Sales)
            {
                quantityLeft -= s.Quantity;
            }
            sales = plan.Sales.ToArray();
        }
        StateHasChanged();

    }

    public decimal GetMarkdownPrice(MarkdownRule[] rules, DateTime date, decimal Price)
    {
        var validRule = new List<MarkdownRule>();
        foreach (var rule in rules)
        {
            if (rule.EffectiveDate <= date)
            {
                validRule.Add(rule);
                Price = Price - (decimal)(Price / rule.PriceReductionPercent);
            }

        }
        return Price;

    }

    public async Task Alert() => await JSRuntime.InvokeAsync<string>("Alert", new object[] { errormessage });
}
